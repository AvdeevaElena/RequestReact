{"version":3,"sources":["reducers/index.jsx","reducers/dataReducer.jsx","actions/types.jsx","config/firebase.jsx","actions/index.jsx","components/ListItem.jsx","components/List.jsx","App.js","serviceWorker.js","index.js","config/keys.jsx","components/style/picture/booksShelfs.png","config/dev.jsx"],"names":["combineReducers","data","state","action","type","payload","firebase","FirebaseConfig","connectRef","ref","child","addToDo","newToDo","dispatch","a","push","set","completeToDo","completeToDoId","remove","fetchToDos","on","snapshot","val","ListItem","completeClick","completeTodoId","props","this","todoId","todo","key","className","title","onClick","Component","connect","Header","Layout","Footer","List","showForm","formValue","inputChange","event","setState","target","value","formSubmit","preventDefault","renderForm","id","onSubmit","onChange","htmlFor","toDos","_","map","isEmpty","src","booksShelfs","style","height","renderToDo","actions","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","require","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId"],"mappings":"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","file":"static/js/main.a530c19f.chunk.js","sourcesContent":["import {combineReducers} from 'redux';\r\nimport data from './dataReducer';\r\n\r\nexport default combineReducers({\r\n  data\r\n});","import {FETCH_ALL} from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  switch(action.type) {\r\n    case FETCH_ALL:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};","export const FETCH_ALL = \"FETCH_ALL\"","import * as firebase from 'firebase'\r\n\r\nimport {FirebaseConfig} from '../config/keys';\r\n\r\nfirebase.initializeApp(FirebaseConfig)\r\n\r\nconst databaseRef = firebase.database().ref();\r\n\r\n\r\nexport const connectRef = databaseRef.child(\"todos\")","import {connectRef} from '../config/firebase';\r\nimport {FETCH_ALL} from './types';\r\n\r\nexport const addToDo = newToDo => async dispatch => {\r\n    connectRef.push().set(newToDo);\r\n};\r\n\r\n\r\n\r\nexport const completeToDo = completeToDoId => async dispatch => {\r\n  connectRef.child(completeToDoId).remove();\r\n};\r\n\r\nexport const fetchToDos = () => async dispatch => {\r\n    connectRef.on(\"value\", snapshot => {\r\n    dispatch({\r\n      type: FETCH_ALL,\r\n      payload: snapshot.val()\r\n    });\r\n  });\r\n};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {completeToDo} from '../actions';\r\n\r\n\r\nclass ListItem extends Component {\r\n  completeClick = completeTodoId => {\r\n    const {completeToDo} = this.props;\r\n    completeToDo(completeTodoId);\r\n  };\r\n  render() {\r\n    const{todoId, todo} = this.props;\r\n    return (\r\n      <div key=\"toDoName\" className=\"col s10 offset-s1 to-do-list-item orange \">\r\n        <h4>\r\n          {todo.title}\r\n          <span \r\n            onClick={() => this.completeClick(todoId)}\r\n            className=\"btn-item\"\r\n          >\r\n            <i className=\"text-item\">done</i>\r\n          </span>\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, {completeToDo})(ListItem);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport _ from 'lodash';\r\nimport * as actions from '../actions';\r\nimport ListItem from './ListItem';\r\nimport \"./style/style.css\";\r\nimport { Layout } from 'antd';\r\nimport booksShelfs from './style/picture/booksShelfs.png'; \r\nconst { Header, Footer } = Layout;\r\n\r\nclass List extends Component {\r\n  state = {\r\n    showForm: true,\r\n    formValue: \"\"\r\n  };\r\n\r\n  inputChange = event => {\r\n    this.setState({formValue: event.target.value});\r\n  };\r\n\r\n  formSubmit = event => {\r\n    const {formValue} = this.state;\r\n    const {addToDo} = this.props;\r\n   \r\n    event.preventDefault();\r\n    addToDo({title: formValue});\r\n    this.setState({formValue: \"\"});\r\n  };\r\n\r\n  renderForm = () => {\r\n    const {showForm, formValue} = this.state;\r\n    if (showForm) {\r\n      return (\r\n        <div id=\"todo-add-form\" >\r\n          <form onSubmit={this.formSubmit}>\r\n<div className=\"input-field\">\r\n              <input \r\n                value={formValue}\r\n                onChange={this.inputChange}\r\n                id=\"toDoNext\"\r\n                type=\"text\"\r\n              />\r\n              <label htmlFor=\"toDoNext\">add new book's task for me to read</label>\r\n            </div>\r\n          </form>\r\n          <span \r\n          onClick={this.formSubmit}\r\n          className=\"btn-item\"\r\n        >\r\n            <i className=\"text-item\">add</i>\r\n          </span>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  renderToDo() {\r\n    const {data} = this.props;\r\n    const toDos = _.map(data, (value, key) => {\r\n      return <ListItem key={key} todoId={key} todo={value} />;\r\n    });\r\n    if (!_.isEmpty(toDos)) {\r\n      return toDos;\r\n    }\r\n    return (\r\n      <div className=\"col s10 offset-s1 center-align\">\r\n        <h4>You have no more book's tasks to read!</h4>\r\n      </div>\r\n    );\r\n  }\r\n  componentWillMount() {\r\n    this.props.fetchToDos();\r\n  }\r\n  render() {\r\n    const {showForm} = this.state;\r\n    return (\r\n\r\n      <div>\r\n         <Header > \r\n         <img  src={booksShelfs} style={{  height: \"60\" }} />\r\n        \r\n         </Header>   \r\n      <div className=\"to-do-list-container\">\r\n        <div className=\"row\">\r\n          {this.renderForm()}\r\n          {this.renderToDo()}\r\n        </div>\r\n        <div className=\"fixed-action-btn\">\r\n          <button \r\n            onClick={() => this.setState({showForm: !showForm})}\r\n            className=\"btn-floating btn-large orange darken-4\"\r\n          >\r\n          {showForm ? (\r\n            <i className=\"large material-icons\">-</i>\r\n          ) : (\r\n            <i className=\"large material-icons\">+</i>\r\n          )}\r\n          </button>\r\n        </div>   \r\n        <Footer  className=\"footer-item\"> made by React and me\r\n                    <p> avdeevaelena5@gmail.com  </p> \r\n        </Footer>\r\n\r\n      </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({data}) => {\r\n  return {\r\n    data\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(List);","\nimport React, {Component} from 'react';\nimport List from './components/List';\nimport { HashRouter} from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>      \n           <div className = 'app-wrapper' >  \n           <div className = 'app-wrapper-content'>            \n     \n           <List/>\n          \n           </div>\n    </div>\n      </HashRouter>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize.min.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();\n","if (process.env.NODE_ENV === \"production\") {\r\n    module.exports = require('./dev');\r\n  } else {\r\n    module.exports = require('./dev');\r\n  }","module.exports = __webpack_public_path__ + \"static/media/booksShelfs.d6e583ac.png\";","export const FirebaseConfig = {\r\n    apiKey: \"AIzaSyCTZUaf0WIMdDcoSlYCOjLZWx9YsLhJjU0\",\r\n    authDomain: \"test2-35655.firebaseapp.com\",\r\n    databaseURL: \"https://test2-35655.firebaseio.com\",\r\n    projectId: \"test2-35655\",\r\n    storageBucket: \"test2-35655.appspot.com\",\r\n    messagingSenderId: \"635049703371\"\r\n  }"],"sourceRoot":""}